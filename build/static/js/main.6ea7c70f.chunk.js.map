{"version":3,"sources":["globalStyles.js","pages lazy /^/.//.*$/ groupOptions: {} namespace object","router/config.js","router/index.js","translation.js","serviceWorkerRegistration.js","index.js"],"names":["Styles","createGlobalStyle","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","routes","path","exact","component","Home","lazy","About","Router","fallback","routeItem","i18n","use","XHR","LanguageDetector","init","debug","lng","fallbackLng","keySeparator","interpolation","escapeValue","resources","en","translations","translationEn","es","translationEs","ns","defaultNS","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","App","basename","process","I18nextProvider","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.6ea7c70f.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst Styles = createGlobalStyle`\r\n    body,\r\n    html,\r\n    a {\r\n        font-family: 'Open Sans';\r\n        font-family: 'Ubuntu', sans-serif;\r\n        font-display: swap;\r\n    }\r\n\r\n\r\n    body {\r\n        margin:0;\r\n        padding:0;\r\n        border: 0;\r\n        outline: 0;\r\n        overflow-x: hidden;\r\n      \r\n        \r\n    }\r\n.Span {\r\n\tcolor: red[500],\r\n\tfontSize: 20, fontSize: 20,\r\n\tposition: \"static\"\r\n}\r\n        \r\n    a:hover {\r\n        color: rgb(209, 29, 50);\r\n    }\r\n\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6\r\n    {\r\n        font-family: 'Poppins', sans-serif;\r\n        padding: 3.7rem  0.5rem 0.5rem 0.3rem ;\r\n        font-size: 3.255rem;\r\n        line-height: 3.0625rem;\r\n      \r\n        @media only screen and (max-width: 414px) {\r\n          font-size: 1.925rem;\r\n        }\r\n        h1,h2,h3,h4,h5,h6::first-letter {\r\n  text-transform: uppercase;\r\n}\r\n   h6 {\r\n       font-family: 'Poppins', sans-serif;\r\n        color: red;\r\n        font-size: 2.975rem;\r\n        line-height: 3.0625rem;\r\n      \r\n        @media only screen and (max-width: 414px) {\r\n          font-size: 1.925rem;\r\n           color: red;\r\n        }\r\n    p {\r\n\t\tfont-weight: 200;\r\n        font-size: 1.625rem;\r\n    }\r\n   \r\n    h1 {\r\n        font-weight: 600;\r\n    }\r\n\r\n    a {\r\n        text-decoration: none;\r\n        outline: none;\r\n        color: rgb(209, 29, 50);\r\n\r\n        :hover {\r\n            color: rgb(209, 29, 50)\r\n        }\r\n    }\r\n    \r\n    *:focus {\r\n        outline: none;\r\n    }\r\n\r\n    .about-block-image svg {\r\n        text-align: center;\r\n    }\r\n\r\n    .ant-drawer-body {\r\n        display: flex;\r\n        flex-direction: column;\r\n        padding: 1.25rem;\r\n        padding-top: 2.5rem;\r\n        padding-right: 2rem;\r\n        text-align: center;\r\n    }\r\n\r\n    .anticon,\r\n    .ant-notification-notice-icon-success {\r\n        color: rgb(209, 29, 50);\r\n        \r\n    }\r\n    Span:hover {\r\n        color: #000\r\n    }\r\n    \r\n\r\n`;\r\n\r\nexport default Styles;","var map = {\n\t\"./About/About\": [\n\t\t47,\n\t\t9,\n\t\t0,\n\t\t4,\n\t\t5\n\t],\n\t\"./About/About.js\": [\n\t\t47,\n\t\t9,\n\t\t0,\n\t\t4,\n\t\t5\n\t],\n\t\"./About/about.css\": [\n\t\t62,\n\t\t7,\n\t\t28\n\t],\n\t\"./Home\": [\n\t\t22,\n\t\t9,\n\t\t0,\n\t\t2,\n\t\t1\n\t],\n\t\"./Home/\": [\n\t\t22,\n\t\t9,\n\t\t0,\n\t\t2,\n\t\t1\n\t],\n\t\"./Home/homeStyles.css\": [\n\t\t61,\n\t\t7,\n\t\t29\n\t],\n\t\"./Home/index\": [\n\t\t22,\n\t\t9,\n\t\t0,\n\t\t2,\n\t\t1\n\t],\n\t\"./Home/index.js\": [\n\t\t22,\n\t\t9,\n\t\t0,\n\t\t2,\n\t\t1\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 58;\nmodule.exports = webpackAsyncContext;","const routes = [\r\n  {\r\n    path: [\"/\", \"/home\"],\r\n    exact: true,\r\n    component: \"Home\",\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import { lazy, Suspense } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport routes from \"./config\";\r\nimport GlobalStyles from \"../globalStyles\";\r\nconst Home = lazy(() => import('../pages/Home'))\r\nconst About = lazy(() => import('../pages/About/About'))\r\n\r\n\r\nconst Router = () => {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <GlobalStyles />\r\n      <Switch>\r\n        {routes.map((routeItem) => {\r\n          return (\r\n            <Route\r\n              key={routeItem.component}\r\n              path={routeItem.path}\r\n              exact={routeItem.exact}\r\n              component={lazy(() => import(`../pages/${routeItem.component}`))}\r\n            />\r\n            \r\n          );\r\n        })}\r\n        <Route exact path='/' >\r\n        <Home/>\r\n        </Route>\r\n        <Route path=\"/About\">\r\n      <About />\r\n    </Route>\r\n      </Switch>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import i18n from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport XHR from \"i18next-xhr-backend\";\r\n\r\nimport translationEn from \"./locales/en/translation.json\";\r\nimport translationEs from \"./locales/es/translation.json\";\r\n\r\ni18n\r\n  .use(XHR)\r\n  .use(LanguageDetector)\r\n  .init({\r\n    debug: false,\r\n    lng: \"en\",\r\n    fallbackLng: \"en\",\r\n\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n\r\n    resources: {\r\n      en: {\r\n        translations: translationEn,\r\n      },\r\n      es: {\r\n        translations: translationEs,\r\n      },\r\n    },\r\n    ns: [\"translations\"],\r\n    defaultNS: \"translations\",\r\n  });\r\n\r\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { I18nextProvider } from \"react-i18next\";\r\nimport \"antd/dist/antd.css\";\r\nimport Router from \"./router\";\r\nimport i18n from \"./translation\";\r\n// import LocalServiceWorkerRegister from \"./sw\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nconst App = () => (\r\n  <BrowserRouter   basename={process.env.PUBLIC_URL}>\r\n    <I18nextProvider i18n={i18n}>\r\n      <Router />\r\n    </I18nextProvider>\r\n  </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}